let fs = require('fs')
    , hotenv = (envfile, parsedata)=>{
        envfile = envfile || process.cwd()+'/.env';
        parsedata = !!parsedata;

        let dataTypeOracle = {
            guess: (val)=>{
                if (dataTypeOracle.is.bool(val))
                    return dataTypeOracle.to.bool(val)
                if (dataTypeOracle.is.number(val))
                    return dataTypeOracle.to.number(val)
                if (dataTypeOracle.is.array(val))
                    return dataTypeOracle.to.array(val)
                if (dataTypeOracle.is.object(val))
                    return dataTypeOracle.to.object(val)
                return val;
            },
            to: {
                bool: (val)=>{
                    try {
                        return Boolean(val);
                    } catch(err){
                        throw err;
                    }
                },
                number: (val)=>{
                    try {
                        return Number(val);
                    } catch(err){
                        throw err;
                    }
                },
                array: (val)=>{
                    if (val.charAt(0)!=='[' || val.charAt(val.length-1)!==']') {
                        throw val + ' is not parsable as array';
                    } else {
                        oldval = val.substr(1,val.length-2).replace(/,[\s\t\v]+/img, ',');
                        if (oldval.match(/,\'|\',/img)) {
                            oldval = oldval.replace(/"/img, '\\"').replace(/'/img,'"');
                        }
                        newval = oldval.split(/,/);
                        return newval;
                    }
                },
                object: (val)=>{
                    try {
                        return JSON.parse(val);
                    } catch(err){
                        throw err;
                    }
                }
            },
            is: {
                bool: (val)=>{
                    try {
                        let newval = dataTypeOracle.to.bool(val);
                        return String(newval)===val;
                    } catch(err){
                    }
                    return false;
                },
                number: (val)=>{
                    try {
                        let newval = dataTypeOracle.to.number(val);
                        return String(newval)===val;
                    } catch(err){
                    }
                    return false;
                },
                array: (val)=>{
                    try {
                        let newval = dataTypeOracle.to.array(val);
                        oldval = val.substr(1,val.length-2).replace(/,[\s\t\v]+/img, ',');
                        if (oldval.match(/,\'|\',/img)) {
                            oldval = oldval.replace(/"/img, '\\"').replace(/'/img,'"');
                        }
                        return '['+String(newval)+']'===oldval;
                    } catch(err){
                    }
                    return false;
                },
                object: (val)=>{
                    try {
                        let newval = dataTypeOracle.to.object(val);
                        return JSON.stringify(newval)===val;
                    } catch(err){
                    }
                    return false;
                }
            }
        }
        , handleData = data=>{
            data.toString('utf8').split(/[\r\n]+/img).map(row=>{
                let eq_pos = row.indexOf('=');
                if (eq_pos>0){
                    let prop = row.substr(0, eq_pos);
                    let value = row.substr(eq_pos+1);
                    process.env[prop] = parsedata ? dataTypeOracle.guess(value) : value;
                }
            });
            return process.env;
        }

        return new Promise((resolve, reject)=>{
            try {
                let data = fs.readFileSync(envfile);
                resolve(handleData(data));
            } catch(err){
                reject(err);
            }
        });
    };

module.exports = hotenv;