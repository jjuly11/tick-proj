
--boundary_.oOo._cT+Lg/MOJAxJPXqmao/EJPYZPNYHSI2t
Content-Length: 1122
Content-Type: application/octet-stream
X-File-MD5: 9b54883148dfd5ff6b9f1a23f9470a30
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/nodemon/LICENSE

MIT License

Copyright (c) 2010 - present, Remy Sharp, https://remysharp.com <remy@remysharp.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

--boundary_.oOo._cT+Lg/MOJAxJPXqmao/EJPYZPNYHSI2t
Content-Length: 2053
Content-Type: application/octet-stream
X-File-MD5: 20f31404ef78eddcb3bac2fdfbd8e723
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/nodemon/package.json

{
  "name": "nodemon",
  "homepage": "https://nodemon.io",
  "author": {
    "name": "Remy Sharp",
    "url": "https://github.com/remy"
  },
  "bin": {
    "nodemon": "./bin/nodemon.js"
  },
  "engines": {
    "node": ">=8.10.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/remy/nodemon.git"
  },
  "description": "Simple monitor script for use during development of a Node.js app.",
  "keywords": [
    "cli",
    "monitor",
    "monitor",
    "development",
    "restart",
    "autoload",
    "reload",
    "terminal"
  ],
  "license": "MIT",
  "main": "./lib/nodemon",
  "scripts": {
    "commitmsg": "commitlint -e",
    "coverage": "istanbul cover _mocha -- --timeout 30000 --ui bdd --reporter list test/**/*.test.js",
    "lint": "eslint lib/**/*.js",
    "test": "npm run lint && npm run spec",
    "spec": "for FILE in test/**/*.test.js; do echo $FILE; TEST=1 mocha --exit --timeout 30000 $FILE; if [ $? -ne 0 ]; then exit 1; fi; sleep 1; done",
    "postspec": "npm run clean",
    "clean": "rm -rf test/fixtures/test*.js test/fixtures/test*.md",
    "web": "node web",
    "semantic-release": "semantic-release",
    "prepush": "npm run lint",
    "killall": "ps auxww | grep node | grep -v grep | awk '{ print $2 }' | xargs kill -9"
  },
  "devDependencies": {
    "@commitlint/cli": "^11.0.0",
    "@commitlint/config-conventional": "^11.0.0",
    "async": "1.4.2",
    "coffee-script": "~1.7.1",
    "eslint": "^7.32.0",
    "husky": "^7.0.4",
    "mocha": "^2.5.3",
    "nyc": "^15.1.0",
    "proxyquire": "^1.8.0",
    "semantic-release": "^18.0.0",
    "should": "~4.0.0"
  },
  "dependencies": {
    "chokidar": "^3.5.2",
    "debug": "^3.2.7",
    "ignore-by-default": "^1.0.1",
    "minimatch": "^3.1.2",
    "pstree.remy": "^1.1.8",
    "semver": "^5.7.1",
    "simple-update-notifier": "^1.0.7",
    "supports-color": "^5.5.0",
    "touch": "^3.1.0",
    "undefsafe": "^2.0.5"
  },
  "version": "2.0.22",
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/nodemon"
  }
}

--boundary_.oOo._cT+Lg/MOJAxJPXqmao/EJPYZPNYHSI2t
Content-Length: 32140
Content-Type: application/octet-stream
X-File-MD5: 3419e14252527ac802ab34387c1b8c87
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/nodemon/README.md

<p align="center">
  <a href="https://nodemon.io/"><img src="https://user-images.githubusercontent.com/13700/35731649-652807e8-080e-11e8-88fd-1b2f6d553b2d.png" alt="Nodemon Logo"></a>
</p>

# nodemon

nodemon is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected.

nodemon does **not** require *any* additional changes to your code or method of development. nodemon is a replacement wrapper for `node`. To use `nodemon`, replace the word `node` on the command line when executing your script.

[![NPM version](https://badge.fury.io/js/nodemon.svg)](https://npmjs.org/package/nodemon)
[![Travis Status](https://travis-ci.org/remy/nodemon.svg?branch=master)](https://travis-ci.org/remy/nodemon) [![Backers on Open Collective](https://opencollective.com/nodemon/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/nodemon/sponsors/badge.svg)](#sponsors)

# Installation

Either through cloning with git or by using [npm](http://npmjs.org) (the recommended way):

```bash
npm install -g nodemon # or using yarn: yarn global add nodemon
```

And nodemon will be installed globally to your system path.

You can also install nodemon as a development dependency:

```bash
npm install --save-dev nodemon # or using yarn: yarn add nodemon -D
```

With a local installation, nodemon will not be available in your system path or you can't use it directly from the command line. Instead, the local installation of nodemon can be run by calling it from within an npm script (such as `npm start`) or using `npx nodemon`.

# Usage

nodemon wraps your application, so you can pass all the arguments you would normally pass to your app:

```bash
nodemon [your node app]
```

For CLI options, use the `-h` (or `--help`) argument:

```bash
nodemon -h
```

Using nodemon is simple, if my application accepted a host and port as the arguments, I would start it as so:

```bash
nodemon ./server.js localhost 8080
```

Any output from this script is prefixed with `[nodemon]`, otherwise all output from your application, errors included, will be echoed out as expected.

You can also pass the `inspect` flag to node through the command line as you would normally:

```bash
nodemon --inspect ./server.js 80
```

If you have a `package.json` file for your app, you can omit the main script entirely and nodemon will read the `package.json` for the `main` property and use that value as the app ([ref](https://github.com/remy/nodemon/issues/14)).

nodemon will also search for the `scripts.start` property in `package.json` (as of nodemon 1.1.x).

Also check out the [FAQ](https://github.com/remy/nodemon/blob/master/faq.md) or [issues](https://github.com/remy/nodemon/issues) for nodemon.

## Automatic re-running

nodemon was originally written to restart hanging processes such as web servers, but now supports apps that cleanly exit. If your script exits cleanly, nodemon will continue to monitor the directory (or directories) and restart the script if there are any changes.

## Manual restarting

Whilst nodemon is running, if you need to manually restart your application, instead of stopping and restart nodemon, you can type `rs` with a carriage return, and nodemon will restart your process.

## Config files

nodemon supports local and global configuration files. These are usually named `nodemon.json` and can be located in the current working directory or in your home directory. An alternative local configuration file can be specified with the `--config <file>` option.

The specificity is as follows, so that a command line argument will always override the config file settings:

- command line arguments
- local config
- global config

A config file can take any of the command line arguments as JSON key values, for example:

```json
{
  "verbose": true,
  "ignore": ["*.test.js", "**/fixtures/**"],
  "execMap": {
    "rb": "ruby",
    "pde": "processing --sketch={{pwd}} --run"
  }
}
```

The above `nodemon.json` file might be my global config so that I have support for ruby files and processing files, and I can run `nodemon demo.pde` and nodemon will automatically know how to r