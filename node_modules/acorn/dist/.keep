
--boundary_.oOo._kINQXUJzDfC0DPzIcfwIn+UyBiBLkNM4
Content-Length: 3174
Content-Type: application/octet-stream
If-Match: "d03a9d5d5ae916e4bc8f3346d9985a2f"
X-File-MD5: e50ee02fb4e6d1919f9f8a197c58e93b
X-File-Mtime: 1696018117
X-File-Path: /Documents/Development/tick-proj/node_modules/@types/whatwg-url/dist/URLSearchParams.d.ts

import { Options as WebIDLConversionOptions } from "webidl-conversions";
import { URLSearchParams } from "../index";
import { implementation as URLSearchParamsImpl } from "./URLSearchParams-impl";

/**
 * Checks whether `obj` is a `URLSearchParams` object with an implementation
 * provided by this package.
 */
export function is(obj: unknown): obj is URLSearchParams;

/**
 * Checks whether `obj` is a `URLSearchParamsImpl` WebIDL2JS implementation object
 * provided by this package.
 */
export function isImpl(obj: unknown): obj is URLSearchParamsImpl;

/**
 * Converts the `URLSearchParams` wrapper into a `URLSearchParamsImpl` object.
 *
 * @throws {TypeError} If `obj` is not a `URLSearchParams` wrapper instance provided by this package.
 */
export function convert(obj: unknown, options?: WebIDLConversionOptions): URLSearchParamsImpl;

/**
 * Creates a new `URLSearchParams` instance.
 *
 * @throws {Error} If the `globalObject` doesn't have a WebIDL2JS constructor
 *         registry or a `URLSearchParams` constructor provided by this package
 *         in the WebIDL2JS constructor registry.
 */
export function create(
    globalObject: object,
    constructorArgs?: readonly [
        init:
            | ReadonlyArray<[name: string, value: string]>
            | { readonly [name: string]: string }
            | string,
    ],
    privateData?: { doNotStripQMark?: boolean | undefined },
): URLSearchParams;

/**
 * Calls `create()` and returns the internal `URLSearchParamsImpl`.
 *
 * @throws {Error} If the `globalObject` doesn't have a WebIDL2JS constructor
 *         registry or a `URLSearchParams` constructor provided by this package
 *         in the WebIDL2JS constructor registry.
 */
export function createImpl(
    globalObject: object,
    constructorArgs?: readonly [
        init:
            | ReadonlyArray<[name: string, value: string]>
            | { readonly [name: string]: string }
            | string,
    ],
    privateData?: { doNotStripQMark?: boolean | undefined },
): URLSearchParamsImpl;

/**
 * Initializes the `URLSearchParams` instance, called by `create()`.
 *
 * Useful when manually sub-classing a non-constructable wrapper object.
 */
export function setup<T extends URLSearchParams>(
    obj: T,
    globalObject: object,
    constructorArgs?: readonly [
        init:
            | ReadonlyArray<[name: string, value: string]>
            | { readonly [name: string]: string }
            | string,
    ],
    privateData?: { doNotStripQMark?: boolean | undefined },
): T;

/**
 * Creates a new `URLSearchParams` object without runing the constructor steps.
 *
 * Useful when implementing specifications that initialize objects
 * in different ways than their constructors do.
 */
declare function _new(globalObject: object): URLSearchParamsImpl;
export { _new as new };

/**
 * Installs the `URLSearchParams` constructor onto the `globalObject`.
 *
 * @throws {Error} If the target `globalObject` doesn't have an `Error` constructor.
 */
export function install(globalObject: object, globalNames: readonly string[]): void;

--boundary_.oOo._kINQXUJzDfC0DPzIcfwIn+UyBiBLkNM4
Content-Length: 46590
Content-Type: application/octet-stream
If-Match: "ce9f10a4e7c53f6a56c0560aadae75ef"
X-File-MD5: 5db3dfa794ddbd1132b54e3182cf07cf
X-File-Mtime: 1696018117
X-File-Path: /Documents/Development/tick-proj/node_modules/acorn/dist/acorn_loose.es.js

import { defaultOptions, addLooseExports, SourceLocation, tokTypes, tokenizer, Node, lineBreak, isNewLine, getLineInfo, Token, lineBreakG } from './acorn';

// Registered plugins
var pluginsLoose = {}

var LooseParser = function LooseParser(input, options) {
  if ( options === void 0 ) options = {};

  this.toks = tokenizer(input, options)
  this.options = this.toks.options
  this.input = this.toks.input
  this.tok = this.last = {type: tokTypes.eof, start: 0, end: 0}
  if (this.options.locations) {
    var here = this.toks.curPosition()
    this.tok.loc = new SourceLocation(this.toks, here, here)
  }
  this.ahead = [] // Tokens ahead
  this.context = [] // Indentation contexted
  this.curIndent = 0
  this.curLineStart = 0
  this.nextLineStart = this.lineEnd(this.curLineStart) + 1
  this.inAsync = false
  // Load plugins
  this.options.pluginsLoose = options.pluginsLoose || {}
  this.loadPlugins(this.options.pluginsLoose)
};

LooseParser.prototype.startNode = function startNode () {
  return new Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)
};

LooseParser.prototype.storeCurrentPos = function storeCurrentPos () {
  return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start
};

LooseParser.prototype.startNodeAt = function startNodeAt (pos) {
  if (this.options.locations) {
    return new Node(this.toks, pos[0], pos[1])
  } else {
    return new Node(this.toks, pos)
  }
};

LooseParser.prototype.finishNode = function finishNode (node, type) {
  node.type = type
  node.end = this.last.end
  if (this.options.locations)
    node.loc.end = this.last.loc.end
  if (this.options.ranges)
    node.range[1] = this.last.end
  return node
};

LooseParser.prototype.dummyNode = function dummyNode (type) {
  var dummy = this.startNode()
  dummy.type = type
  dummy.end = dummy.start
  if (this.options.locations)
    dummy.loc.end = dummy.loc.start
  if (this.options.ranges)
    dummy.range[1] = dummy.start
  this.last = {type: tokTypes.name, start: dummy.start, end: dummy.start, loc: dummy.loc}
  return dummy
};

LooseParser.prototype.dummyIdent = function dummyIdent () {
  var dummy = this.dummyNode("Identifier")
  dummy.name = "✖"
  return dummy
};

LooseParser.prototype.dummyString = function dummyString () {
  var dummy = this.dummyNode("Literal")
  dummy.value = dummy.raw = "✖"
  return dummy
};

LooseParser.prototype.eat = function eat (type) {
  if (this.tok.type === type) {
    this.next()
    return true
  } else {
    return false
  }
};

LooseParser.prototype.isContextual = function isContextual (name) {
  return this.tok.type === tokTypes.name && this.tok.value === name
};

LooseParser.prototype.eatContextual = function eatContextual (name) {
  return this.tok.value === name && this.eat(tokTypes.name)
};

LooseParser.prototype.canInsertSemicolon = function canInsertSemicolon () {
  return this.tok.type === tokTypes.eof || this.tok.type === tokTypes.braceR ||
    lineBreak.test(this.input.slice(this.last.end, this.tok.start))
};

LooseParser.prototype.semicolon = function semicolon () {
  return this.eat(tokTypes.semi)
};

LooseParser.prototype.expect = function expect (type) {
    var this$1 = this;

  if (this.eat(type)) return true
  for (var i = 1; i <= 2; i++) {
    if (this$1.lookAhead(i).type == type) {
      for (var j = 0; j < i; j++) this$1.next()
      return true
    }
  }
};

LooseParser.prototype.pushCx = function pushCx () {
  this.context.push(this.curIndent)
};

LooseParser.prototype.popCx = function popCx () {
  this.curIndent = this.context.pop()
};

LooseParser.prototype.lineEnd = function lineEnd (pos) {
  while (pos < this.input.length && !isNewLine(this.input.charCodeAt(pos))) ++pos
  return pos
};

LooseParser.prototype.indentationAfter = function indentationAfter (pos) {
    var this$1 = this;

  for (var count = 0;; ++pos) {
    var ch = this$1.input.charCodeAt(pos)
    if (ch === 32) ++count
    else if (ch === 9) count += this$1.options.tabSize
    else return count
  }
};

LooseParser.prototype.closes = function closes (closeTok, indent, line, blockHeuristic) {
  if (this.tok.type === closeTok || this.tok.type === tokTypes.eof) return true
  retur