
--boundary_.oOo._KKWa6aIVSSV9GVcmX+p841SlYCRPpP5+
Content-Length: 2097
Content-Type: application/octet-stream
X-File-MD5: 4d670d7a67186eae6d1d2c86cf344f1b
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/mquery/node_modules/ms/readme.md

# ms

[![Build Status](https://travis-ci.org/zeit/ms.svg?branch=master)](https://travis-ci.org/zeit/ms)
[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/zeit)

Use this package to easily convert various time formats to milliseconds.

## Examples

```js
ms('2 days')  // 172800000
ms('1d')      // 86400000
ms('10h')     // 36000000
ms('2.5 hrs') // 9000000
ms('2h')      // 7200000
ms('1m')      // 60000
ms('5s')      // 5000
ms('1y')      // 31557600000
ms('100')     // 100
ms('-3 days') // -259200000
ms('-1h')     // -3600000
ms('-200')    // -200
```

### Convert from Milliseconds

```js
ms(60000)             // "1m"
ms(2 * 60000)         // "2m"
ms(-3 * 60000)        // "-3m"
ms(ms('10 hours'))    // "10h"
```

### Time Format Written-Out

```js
ms(60000, { long: true })             // "1 minute"
ms(2 * 60000, { long: true })         // "2 minutes"
ms(-3 * 60000, { long: true })        // "-3 minutes"
ms(ms('10 hours'), { long: true })    // "10 hours"
```

## Features

- Works both in [Node.js](https://nodejs.org) and in the browser
- If a number is supplied to `ms`, a string with a unit is returned
- If a string that contains the number is supplied, it returns it as a number (e.g.: it returns `100` for `'100'`)
- If you pass a string with a number and a valid unit, the number of equivalent milliseconds is returned

## Related Packages

- [ms.macro](https://github.com/knpwrs/ms.macro) - Run `ms` as a macro at build-time.

## Caught a Bug?

1. [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device
2. Link the package to the global module directory: `npm link`
3. Within the module you want to test your local development instance of ms, just link it to the dependencies: `npm link ms`. Instead of the default one from npm, Node.js will now use your clone of ms!

As always, you can run the tests using: `npm test`

--boundary_.oOo._KKWa6aIVSSV9GVcmX+p841SlYCRPpP5+
Content-Length: 635
Content-Type: application/octet-stream
X-File-MD5: 6cce012684bc2b3b7b8783e02fb458cb
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/mquery/test/collection/node.js

'use strict';

const assert = require('assert');
const mongo = require('mongodb');

const uri = process.env.MQUERY_URI || 'mongodb://localhost/mquery';
let client;
let db;

exports.getCollection = function(cb) {
  mongo.MongoClient.connect(uri, function(err, _client) {
    assert.ifError(err);
    client = _client;
    db = client.db();

    const collection = db.collection('stuff');

    // clean test db before starting
    db.dropDatabase(function() {
      cb(null, collection);
    });
  });
};

exports.dropCollection = function(cb) {
  db.dropDatabase(function() {
    client.close(cb);
  });
};

--boundary_.oOo._KKWa6aIVSSV9GVcmX+p841SlYCRPpP5+
Content-Length: 598
Content-Type: application/octet-stream
X-File-MD5: bddc759c9419adb89cece6a906a272be
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/multer/lib/counter.js

var EventEmitter = require('events').EventEmitter

function Counter () {
  EventEmitter.call(this)
  this.value = 0
}

Counter.prototype = Object.create(EventEmitter.prototype)

Counter.prototype.increment = function increment () {
  this.value++
}

Counter.prototype.decrement = function decrement () {
  if (--this.value === 0) this.emit('zero')
}

Counter.prototype.isZero = function isZero () {
  return (this.value === 0)
}

Counter.prototype.onceZero = function onceZero (fn) {
  if (this.isZero()) return fn()

  this.once('zero', fn)
}

module.exports = Counter

--boundary_.oOo._KKWa6aIVSSV9GVcmX+p841SlYCRPpP5+
Content-Length: 1733
Content-Type: application/octet-stream
X-File-MD5: c00b7cdb22341356b668bb6016b2665e
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/multer/lib/file-appender.js

var objectAssign = require('object-assign')

function arrayRemove (arr, item) {
  var idx = arr.indexOf(item)
  if (~idx) arr.splice(idx, 1)
}

function FileAppender (strategy, req) {
  this.strategy = strategy
  this.req = req

  switch (strategy) {
    case 'NONE': break
    case 'VALUE': break
    case 'ARRAY': req.files = []; break
    case 'OBJECT': req.files = Object.create(null); break
    default: throw new Error('Unknown file strategy: ' + strategy)
  }
}

FileAppender.prototype.insertPlaceholder = function (file) {
  var placeholder = {
    fieldname: file.fieldname
  }

  switch (this.strategy) {
    case 'NONE': break
    case 'VALUE': break
    case 'ARRAY': this.req.files.push(placeholder); break
    case 'OBJECT':
      if (this.req.files[file.fieldname]) {
        this.req.files[file.fieldname].push(placeholder)
      } else {
        this.req.files[file.fieldname] = [placeholder]
      }
      break
  }

  return placeholder
}

FileAppender.prototype.removePlaceholder = function (placeholder) {
  switch (this.strategy) {
    case 'NONE': break
    case 'VALUE': break
    case 'ARRAY': arrayRemove(this.req.files, placeholder); break
    case 'OBJECT':
      if (this.req.files[placeholder.fieldname].length === 1) {
        delete this.req.files[placeholder.fieldname]
      } else {
        arrayRemove(this.req.files[placeholder.fieldname], placeholder)
      }
      break
  }
}

FileAppender.prototype.replacePlaceholder = function (placeholder, file) {
  if (this.strategy === 'VALUE') {
    this.req.file = file
    return
  }

  delete placeholder.fieldname
  objectAssign(placeholder, file)
}

module.exports = FileAppender

--boundary_.oOo._KKWa6aIVSSV9GVcmX+p841SlYCRPpP5+
Content-Length: 570
Content-Type: application/octet-stream
X-File-MD5: ce5a43ac0ad088eac1cd3ed89d6f3354
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/multer/lib/remove-uploaded-files.js

function removeUploadedFiles (uploadedFiles, remove, cb) {
  var length = uploadedFiles.length
  var errors = []

  if (length === 0) return cb(null, errors)

  function handleFile (idx) {
    var file = uploadedFiles[idx]

    remove(file, function (err) {
      if (err) {
        err.file = file
        err.field = file.fieldname
        errors.push(err)
      }

      if (idx < length - 1) {
        handleFile(idx + 1)
      } else {
        cb(null, errors)
      }
    })
  }

  handleFile(0)
}

module.exports = removeUploadedFiles

--boundary_.oOo._KKWa6aIVSSV9GVcmX+p841SlYCRPpP5+
Content-Length: 5325
Content-Type: application/octet-stream
X-File-MD5: c1cf349f08245fd66f79644a87f1d241
X-File-Mtime: 1696018121
X-File-Path: /Documents/Development/tick-proj/node_modules/multer/lib/make-middleware.js

var is = require('type-is')
var Busboy = require('busboy')
var extend = require('xtend')
var appendField = require('append-field')

var Counter = require('./counter')
var MulterError = require('./multer-error')
var FileAppender = require('./file-appender')
var removeUploadedFiles = require('./remove-uploaded-files')

function makeMiddleware (setup) {
  return function multerMiddleware (req, res, next) {
    if (!is(req, ['multipart'])) return next()

    var options = setup()

    var limits = options.limits
    var storage = options.storage
    var fileFilter = options.fileFilter
    var fileStrategy = options.fileStrategy
    var preservePath = options.preservePath

    req.body = Object.create(null)

    var busboy

    try {
      busboy = Busboy({ headers: req.headers, limits: limits, preservePath: preservePath })
    } catch (err) {
      re